//--------------------------------------
//--- 010 Editor v5.0.2 Binary Template
//
// File:     mm3xbc.bt
// Author:   Daniel Stien <daniel@stien.org>
// Revision: 2015-03-20
// Purpose:  Midtown Madness 3 city
//--------------------------------------

typedef enum <uint16> {
    TriangleList = 0x6001,
    QuadList     = 0xC001,
} PrimitiveType;

typedef enum <uint32> {
    DXT1          = 0, // 4 bpp
    DXT1GlassMask = 1, // 4 bpp * 2, interleaved in 8-byte blocks
    DXT1AlphaMask = 2, // 4 bpp * 2, interleaved in 8-byte blocks
    L8            = 3, // 8 bpp
} TextureFormat;

typedef struct {
    float x, y;
} Vec2f <read=ReadVec2f>;

typedef struct {
    float x, y, z;
} Vec3f <read=ReadVec3f>;

typedef struct {
    float x, y, z, w;
} Vec4f <read=ReadVec4f>;

typedef struct {
    Vec2f min, max;
} BoundBox2 <read=ReadBoundBox2>;

typedef struct {
    Vec3f min, max;
} BoundBox3 <read=ReadBoundBox3>;

typedef struct {
    Vec3f x, y, z;
    Vec3f p1, p2;
} Matrix;

typedef struct {
    // Position
    int16 x;
    int16 y;
    int16 z;
    int16 unknown;
    // Normal, D3DVSDT_NORMPACKED3
    int   nx : 11;
    int   ny : 11;
    int   nz : 10;
    // Us, D3DVSDT_NORMPACKED3
    int   u0 : 11;
    int   u1 : 11;
    int   u2 : 10;
    // Vs, D3DVSDT_NORMPACKED3
    int   v0 : 11;
    int   v1 : 11;
    int   v2 : 10;
} RoadVertex <read=ReadRoadVertex>;

typedef struct {
    // Position, D3DVSDT_NORMPACKED3
    int   x : 11;
    int   y : 11;
    int   z : 10;
    int32 unknown;
    // Us, D3DVSDT_NORMPACKED3
    int   u0 : 11;
    int   u1 : 11;
    int   u2 : 10;
    // Vs, D3DVSDT_NORMPACKED3
    int   v0 : 11;
    int   v1 : 11;
    int   v2 : 10;
} FacadeVertex <read=ReadFacadeVertex>;

typedef struct {
    uint32       vertexCount;
    uint32       indexCount;
    RoadVertex   vertices[vertexCount];
    uint16       indices[indexCount];
} RoadMesh <optimize=false>;

typedef struct {
    uint32       vertexCount;
    uint32       indexCount;
    FacadeVertex vertices[vertexCount];
    uint16       indices[indexCount];
} FacadeMesh <optimize=false>;

typedef struct {
    uint32 unknown0;
    uint32 meshId;
    PrimitiveType type;

    // DrawIndexedPrimitives() parameters
    uint16 minIndex;
    uint16 vertexCount;
    uint16 offset;
    uint16 count;

    uint16    unknown1;
    uint16    unknown2[10]; // uint16 offset + lengths in indices list
    uint32    objectOffset;
    uint32    objectCount;
    uint32    indexInObjectsUnknown0;
    uint32    entriesInObjectsUnknown0;
    BoundBox3 aabb1;
    BoundBox3 aabb2;
    uint32    unknown3;
    if (unknown3 > 0x0100) { // Facade mesh
        uint32 unknown4[5]; // separate collision mesh?
    }
} MeshSection <optimize=false, read=ReadMeshSection>;

typedef struct {
    Vec4f rotation;
	Vec3f position;
} RoadObjectPosition <read=ReadRoadObjectPosition>;

typedef struct {
    float unknown;
	Vec3f position;
} FacadeObjectPosition <read=ReadFacadeObjectPosition>;

typedef struct {
    int16 unknown0, unknown1;
    float unknown2;
} ObjectUnknown0;

typedef struct {
    Vec3f position;
    Vec2f uv;
    uint16 unknown0;
    uint16 unknown1;
} TreeVertex1 <read=ReadTreeVertex1>;

typedef struct {
    uint32 unknown[4];
} TreeVertex2;

typedef struct {
    uint32      vertex1Count;
    TreeVertex1 vertices1[vertex1Count];
    uint32      vertex2Count;
    TreeVertex2 vertices2[vertex2Count];
    uint32      indexCount;
    uint16      indices[indexCount];
} TreeMesh <optimize=false>;

// Object mesh section...
typedef struct {
    uint32 unknown0;
    uint16 unknown1;
    uint16 id;
    BoundBox3 aabb;
    float  unknown2[42];
    uint16 unknown3;
    uint16 bound; 
    uint16 unknown4;
    uint16 unknown5;
    uint16 verticesIndex;
    uint16 indicesIndex;
    uint16 unknown6;
    uint32 unknown7[5];
    uint16 unknown8[5];
} ObjectUnknown1;

typedef struct {
    uint32 dataLength;
    string name;
    uint32 type;
    uint32 unknown; // Index?
    uint32 width;
    uint32 height;
    uint32 stride;
    uint32 mips;
    TextureFormat format;
} TextureHeader <read=ReadTextureHeader>;

typedef struct {
    TextureHeader header;
    ubyte data[header.dataLength];
} Texture <optimize=false, read=ReadTexture>;

typedef struct {
    TextureHeader header; // Bigger version in .pak file if type in range 10 - 13.
    Texture       texture;
} ProcessedTexture <optimize=false, read=ReadProcessedTexture>;

typedef struct {
    string name;
    uint32 unknownCount;
    uint16 unknown[unknownCount];
} TreeBase <optimize=false, read=ReadTreeBase>;

// Must encapsulate string in struct in order to read string arrays.
typedef struct {
    string s;
} String <optimize=false, read=ReadStringVal>;

// Header
struct {
    string    version;
    uint32    colCount; // Grid of city parts
    uint32    rowCount;
    string    name;
    BoundBox3 aabb3;
    BoundBox2 aabb2;
    float     maxY;
    uint32    unknown0[11];
    float     unknown1[7];
    int32     cellCount1; // City cells in .pak file (colCount * rowCount)
    int32     unknownPerCell[cellCount1]; // no impact?
    int32     cellCount2;
    int32     subfilesPerCell[cellCount2]; // Number of additional subfiles after city cell in .pak file
    // These bytes matches the content of the last subfile in the .pak file.
    // No impact as long as they're matching. EOF indicator or 128-bit hash?
    ubyte     eof[16];
    int32     matrixCount;
    Matrix    matrices[matrixCount];
} header <open=true>;

// Roads
struct {
    uint32 meshCount;
    struct {
        RoadMesh meshes[meshCount];
    } meshes;

    uint32 textureLength;
    struct {
        Texture textures[5];
    } textures;

    uint32 meshSectionCount;
    struct {
        MeshSection meshSections[meshSectionCount];
    } meshSections;

    uint32 objectIndexCount;
    uint16 objectIndices[objectIndexCount]; // Index in name list

    uint32 objectPositionCount;
    RoadObjectPosition objectPositions[objectPositionCount];
} roads <open=true>;

// Facades
struct {
    uint32 meshCount;
    struct {
        FacadeMesh meshes[meshCount];
    } meshes;

    uint32 textureLength;
    struct {
        Texture textures[6];
    } textures;

    uint32 meshSectionCount;
    struct {
        MeshSection meshSections[meshSectionCount];
    } meshSections;

    uint32 objectIndexCount;
    uint16 objectIndices[objectIndexCount]; // Index in name list

    uint32 objectPositionCount;
    FacadeObjectPosition objectPositions[objectPositionCount];
} facades <open=true>;

// Objects
struct {
    uint32 unknown0Count;
    ObjectUnknown0 unknown0[unknown0Count];

    uint32 unknown1Count;
    ObjectUnknown1 unknown1[unknown1Count];

    uint32 nameCount;
    struct {
        String names[nameCount];
    } names;

    uint32 unknown2Count;
    Vec3f  unknown2[unknown2Count]; // Sprite vertices?

    uint32 unknown3Count;
    Vec3f  unknown3[unknown3Count * 2]; // Object vertices?

    uint32 unknown4Count;
    Vec3f  unknown4[unknown4Count];

    uint32 unknown5Count;
    Vec4f  unknown5[unknown5Count];

    uint32 unknown6Count;
    float  unknown6[unknown6Count * 7];

    uint32 unknown7Count;
    float  unknown7[unknown7Count * 6];
} objects <open=true>;

// Tree bases
struct {
    uint32 unknown0Count;
    Vec4f  unknown0[unknown0Count];

    uint32 baseCount;
    struct {
        TreeBase bases[baseCount];
    } bases;

    uint32   meshCount;
    struct {
        TreeMesh meshes[meshCount]; // Tree leafs
    } meshes;
} trees <open=true>;

struct {
    Texture seasons[12];
} seasons;

struct {
    uint32 unknown0; // Size?
    uint32 unknown1; // Total size of whatever unknown3 points to?
    uint32 unknown2Count;
    uint16 unknown2[unknown2Count * 4];

    uint32 unknown3Count;
    uint32 unknown3[unknown3Count]; // Offsets? Affects .pak textures?
    uint32 unknown4Count;
    uint32 unknown4[unknown4Count]; // sum(unknown4) == unknown3Count...
} unknown <open=true>;

struct {
    uint32           textureCount;
    struct {
        ProcessedTexture processed[textureCount];
    } processed;
    Texture          noise;
} textures <open=true>;

// Vec2f summary
string ReadVec2f(Vec2f &v)
{
    string s;
    SPrintf(s, "%f, %f", v.x, v.y);
    return s;
}

// Vec3f summary
string ReadVec3f(Vec3f &v)
{
    string s;
    SPrintf(s, "%f, %f, %f", v.x, v.y, v.z);
    return s;
}

// Vec4f summary
string ReadVec4f(Vec4f &v)
{
    string s;
    SPrintf(s, "%f, %f, %f, %f", v.x, v.y, v.z, v.w);
    return s;
}

// BoundBox3 summary
string ReadBoundBox3(BoundBox3 &b)
{
    string s;
    SPrintf(s, "(%f, %f, %f), (%f, %f, %f)", b.min.x, b.min.y, b.min.z, b.max.x, b.max.y, b.max.z);
    return s;
}

// BoundBox2 summary
string ReadBoundBox2(BoundBox2 &b)
{
    string s;
    SPrintf(s, "(%f, %f), (%f, %f)", b.min.x, b.min.y, b.max.x, b.max.y);
    return s;
}

// RoadVertex summary
string ReadRoadVertex(RoadVertex &v)
{
    string s;
    SPrintf(s, "%d, %d, %d", v.x, v.y, v.z);
    return s;
}

// FacadeVertex summary
string ReadFacadeVertex(FacadeVertex &v)
{
    string s;
    SPrintf(s, "%d, %d, %d", v.x, v.y, v.z);
    return s;
}

// MeshSection summary
string ReadMeshSection(MeshSection &d)
{
  string s;
  SPrintf(s, "%d: %s", d.meshId, EnumToString(d.type));
  return s;
}

// RoadObjectPosition summary
string ReadRoadObjectPosition(RoadObjectPosition &p)
{
    return ReadVec3f(p.position);
}

// FacadeObjectPosition summary
string ReadFacadeObjectPosition(FacadeObjectPosition &p)
{
    return ReadVec3f(p.position);
}

// TreeVertex1 summary
string ReadTreeVertex1(TreeVertex1 &v)
{
    return ReadVec3f(v.position);
}

// TextureHeader summary
string ReadTextureHeader(TextureHeader &h)
{
    string s;
    SPrintf(s, "%s (%d, %d, %d)", h.name, h.format, h.type, h.unknown);
    return s;
}

// Texture summary
string ReadTexture(Texture &t)
{
    return ReadTextureHeader(t.header);
}

// ProcessedTexture summary
string ReadProcessedTexture(ProcessedTexture &t)
{
    return ReadTextureHeader(t.header);
}

// TreeBase summary
string ReadTreeBase(TreeBase &d)
{
  string s;
  SPrintf(s, "%s (%d)", d.name, d.unknownCount);
  return s;
}

// Encapsulated string summary
string ReadStringVal(String &d)
{
  string s;
  SPrintf(s, "%s", d.s);
  return s;
}
